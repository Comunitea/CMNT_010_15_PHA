<?xml version="1.0" encoding="UTF-8"?>
<openerp>
    <data>

       <record id="edi_invoic" model="edi.edi">
            <field name="name">Export invoices example</field>
            <field name="code">INVOIC</field>
            <field name="type">csv</field>
            <field name="charset" eval="'ISO-8859-1'" />
            <field name="end_line" eval="'simple'" />
            <field name="file_template" eval="'FACTURA_number_fecha+hora'" />
            <field name="start_identifier" eval="-1" />
            <field name="stop_identifier" eval="-1" />
            <field name="float_separator" eval="','" />
            <field name="delimiter" eval="'|'" />
            <field name="skip_first" eval="0"/>
            <field name="quotechar"></field>
            <field name="eval_out" >
invoice_obj = self.pool.get('account.invoice')
ctx['model_log'] = 'account.invoice'
ctx['ids_log'] = ctx['active_ids']
for invoice in invoice_obj.browse(cr, uid, ctx['active_ids']):
    filename = time.strftime('INVOIC_' + invoice.number.replace('/',"") + '_%Y%m%d%H%M', time.localtime(time.time()))
    data[filename] = []
    _logger.info("Factura %s" % (str(invoice.id)))
    CAB = {
        'lineId': "INVOIC_D_93A_UN_EAN007"
    }
    data[filename].append(edi._create_line_csv(CAB,structs))
    INV = {
        'lineId': "INV",
        'col1': invoice.number,
        'col2': invoice.type == "out_invoice" and "380" or "381",
        'col3': "9"
    }
    data[filename].append(edi._create_line_csv(INV,structs))
    DTM = {
        'lineId': 'DTM',
        'col1': invoice.date_invoice.replace("-",""),
    }
    data[filename].append(edi._create_line_csv(DTM,structs))
    if invoice.payment_mode_id and invoice.payment_mode_id.edi_code:
        PAI = {
            'lineId': 'PAI',
            'col1': invoice.payment_mode_id.edi_code
        }
        data[filename].append(edi._create_line_csv(PAI,structs))
    if invoice.type == "out_refund" and invoice.origin_invoices_ids:
        RFF = {
            'lineId': 'RFF',
            'col1':  'IV',
            'col2': invoice.type == "out_refund" and invoice.origin_invoices_ids
        }
    elif invoice.type == "out_invoice" and invoice.origin:
        RFF = {
            'lineId': 'RFF',
            'col1': invoice.origin.startswith("SO") and 'ON' or 'DQ',
            'col2': invoice.origin
        }
    else:
        RFF = False
    if RFF:
        data[filename].append(edi._create_line_csv(RFF,structs))
    NADSU = {
        'lineId': 'NADSU',
        'col1': invoice.company_id.partner_id.gln,
        'col2': invoice.company_id.name,
        'col3': " ",
        'col4': invoice.company_id.street or " ",
        'col5': invoice.company_id.city or " ",
        'col6': invoice.company_id.zip or " ",
        'col7': invoice.company_id.vat or " "
    }
    data[filename].append(edi._create_line_csv(NADSU,structs))
    FACT = {
        'lineId': 'NADBY',
        'col1': invoice.partner_id.commercial_partner_id.gln,
        'col2': invoice.partner_id.commercial_partner_id.name,
        'col3': invoice.partner_id.commercial_partner_id.street or " ",
        'col4': invoice.partner_id.commercial_partner_id.city or " ",
        'col5': invoice.partner_id.commercial_partner_id.zip or " ",
        'col6': invoice.partner_id.commercial_partner_id.vat or " "
    }
    data[filename].append(edi._create_line_csv(FACT,structs))
    FACT['lineId'] = "NADIV"
    data[filename].append(edi._create_line_csv(FACT,structs))
    NADDP = {
        'lineId': 'NADDP',
        'col1': invoice.partner_id.gln,
        'col2': invoice.partner_id.name,
        'col3': invoice.partner_id.street or " ",
        'col4': invoice.partner_id.city or " ",
        'col5': invoice.partner_id.zip or " "
    }
    data[filename].append(edi._create_line_csv(NADDP,structs))
    CUX = {
        'lineId': 'CUX',
        'col1': invoice.currency_id.name,
        'col2': '4'
    }
    data[filename].append(edi._create_line_csv(CUX,structs))
    fin_seq = 1
    if invoice.commercial_discount_amount > 0.0:
        fin_seq = 2
        ALC = {
            'lineId': 'ALC',
            'col1': 'A',
            'col2': '1',
            'col3': 'TD',
            'col4': invoice.commercial_discount_input,
            'col5': invoice.commercial_discount_amount,

        }
        data[filename].append(edi._create_line_csv(ALC, structs))
    if invoice.financial_discount_amount > 0.0:

        ALC = {
            'lineId': 'ALC',
            'col1': 'A',
            'col2': str(fin_seq),
            'col3': 'TD',
            'col4': invoice.financial_discount_input,
            'col5': invoice.financial_discount_amount,

        }
        data[filename].append(edi._create_line_csv(ALC, structs))
    for line in invoice.invoice_line:
        LIN = {
            'lineId': 'LIN',
            'col1': line.product_id.ean13,
            'col2': "EN"
        }
        data[filename].append(edi._create_line_csv(LIN,structs))
        IMDLIN = {
            'lineId': 'IMDLIN',
            'col1': line.name,
            'col2': 'M',
            'col3': 'F'
        }
        data[filename].append(edi._create_line_csv(IMDLIN,structs))
        QTYLIN = {
            'lineId': 'QTYLIN',
            'col1': '47',
            'col2': line.quantity,
            'col3': line.uos_id.edi_code or 'PCE'
        }
        data[filename].append(edi._create_line_csv(QTYLIN,structs))
        MOALIN = {
            'lineId': 'MOALIN',
            'col1': line.price_subtotal,
        }
        data[filename].append(edi._create_line_csv(MOALIN,structs))
        PRILIN = {
            'lineId': 'PRILIN',
            'col1': 'AAA',
            'col2': line.price_unit * ((1 - (line.discount or 0.0)) / 100.0),
            'col3': line.uos_id.edi_code or 'PCE'
        }
        data[filename].append(edi._create_line_csv(PRILIN,structs))
        for tax in line.invoice_line_tax_id:
            TAXLIN = {
                'lineId': 'TAXLIN',
                'col1': 'VAT',
                'col2': tax.amount * 100.0,
                'col3': line.price_subtotal * tax.amount,
            }
            data[filename].append(edi._create_line_csv(TAXLIN,structs))
        if line.discount:
            ALCLIN = {
                'lineId': 'ALCLIN',
                'col1': 'A',
                'col2': '1',
                'col3': 'TD',
                'col4': '',
                'col5': line.discount,
                'col6': line.discounted_amount,
            }
            data[filename].append(edi._create_line_csv(ALCLIN, structs))
    CNTRES = {
        'lineId': 'CNTRES',
        'col1': '2'
    }
    data[filename].append(edi._create_line_csv(CNTRES,structs))
    MOARES = {
        'lineId': 'MOARES',
        'col1': invoice.amount_untaxed,
        'col2': sum([x.price_unit * x.quantity for x in invoice.invoice_line]),
        'col3': invoice.amount_untaxed,
        'col4': invoice.amount_total,
        'col5': invoice.amount_tax,
    }
    data[filename].append(edi._create_line_csv(MOARES,structs))
    for tax in invoice.tax_line:
        TAXRES = {
            'lineId': 'TAXRES',
            'col1': 'VAT',
            'col2': int((tax.amount / tax.base) * 100.0),
            'col3': tax.amount,
            'col4': tax.base,
        }
        data[filename].append(edi._create_line_csv(TAXRES,structs))
    ctx['model_log'] = 'account.invoice'
    ctx['id_log'] = invoice.id
    ctx['filename'] = filename
    self._log(cr2, uid, [edi.id], ctx)</field>
        </record>

        <record forcecreate="True" id="edi_invoice_field_1" model="edi.edi.csv.field">
            <field name="name">lineId</field>
            <field name="sequence" eval="1" />
            <field name="edi" ref="edi_invoic" />
            <field name="type">char</field>
        </record>

        <record forcecreate="True" id="edi_invoice_field_2" model="edi.edi.csv.field">
            <field name="name">col1</field>
            <field name="sequence" eval="2" />
            <field name="edi" ref="edi_invoic" />
            <field name="type">char</field>
        </record>

        <record forcecreate="True" id="edi_invoice_field_3" model="edi.edi.csv.field">
            <field name="name">col2</field>
            <field name="sequence" eval="3" />
            <field name="edi" ref="edi_invoic" />
            <field name="type">char</field>
        </record>

        <record forcecreate="True" id="edi_invoice_field_4" model="edi.edi.csv.field">
            <field name="name">col3</field>
            <field name="sequence" eval="4" />
            <field name="edi" ref="edi_invoic" />
            <field name="type">char</field>
        </record>

        <record forcecreate="True" id="edi_invoice_field_5" model="edi.edi.csv.field">
            <field name="name">col4</field>
            <field name="sequence" eval="5" />
            <field name="edi" ref="edi_invoic" />
            <field name="type">char</field>
        </record>

        <record forcecreate="True" id="edi_invoice_field_6" model="edi.edi.csv.field">
            <field name="name">col5</field>
            <field name="sequence" eval="6" />
            <field name="edi" ref="edi_invoic" />
            <field name="type">char</field>
        </record>

        <record forcecreate="True" id="edi_invoice_field_7" model="edi.edi.csv.field">
            <field name="name">col6</field>
            <field name="sequence" eval="7" />
            <field name="edi" ref="edi_invoic" />
            <field name="type">char</field>
        </record>

        <record forcecreate="True" id="edi_invoice_field_8" model="edi.edi.csv.field">
            <field name="name">col7</field>
            <field name="sequence" eval="8" />
            <field name="edi" ref="edi_invoic" />
            <field name="type">char</field>
        </record>

        </data>
</openerp>
